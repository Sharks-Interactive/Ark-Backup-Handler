name: Ark Backup Handler Build And Release

# Runs on commits with tags
on:
  push:
    tags:
      - '*'
      
jobs:
  build:
    strategy:
      matrix:
        channel: [Dev, Prod_Sideload]
        targetPlatform: [x86, x64]
        include:

          - channel: Dev
            ChannelName: Dev
            Configuration: Debug
            DistributionUrl: https://sharksinteractive.net/Ark-Backup-Handler/
            MsixPackageId: ABH.Sharks.Dev
            MsixPublisherId: CN=Sharks-Interactive
            MsixPackageDisplayName: Ark Backup Handler (Unstable)

          - channel: Prod_Sideload
            Configuration: Release
            ChannelName: Prod_Sideload
            DistributionUrl: https://sharksinteractive.net/Ark-Backup-Handler/
            MsixPackageId: ABH.Sharks.ProdSideload
            MsixPublisherId: CN=Sharks-Interactive
            MsixPackageDisplayName: Ark Backup Handler (Stable)

    runs-on: windows-latest

    env:
      SigningCertificate: Sharks-Interactive.pfx
      Solution_Path: Ark Backup Handler.sln
      Test_Project_Path: Ark-Backup-Handler.Tests\Ark Backup Handler.Tests.csproj
      Wpf_Project_Path: Ark-Backup-Handler\Ark Backup Handler.csproj
      Actions_Allow_Unsecure_Commands: true

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Set Git Versino Variables
      uses: aarnott/nbgv@v0.3
      with:
        setAllVars: true

    - name: .NET Core Install
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.302'

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.1

    - name: Decode Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:Wap_Project_Directory -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      if: matrix.ChannelName != 'Prod_Store'

    - name:  Restore application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: ${{ matrix.Configuration }}
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

    - name: Build the Windows Application Packaging Project (wapproj) for ${{ matrix.ChannelName }}
      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      if: matrix.ChannelName != 'Prod_Store'
      env:
        AppxBundle: Never
        AppInstallerUri: ${{ matrix.DistributionUrl }}
        BuildMode: SideloadOnly
        Configuration: ${{ matrix.Configuration }}
        GenerateAppInstallerFile: True
        TargetPlatform: ${{ matrix.targetplatform }}
        
    - name: Build the Windows Application Packaging Project (wapproj) for ${{ matrix.ChannelName }}
      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:GenerateAppInstallerFile=$env:GenerateAppInstallerFile /p:AppxPackageSigningEnabled=$env:AppxPackageSigningEnabled
      if: matrix.ChannelName == 'Prod_Store'
      env:
        AppxBundle: Never
        AppxPackageSigningEnabled: False
        BuildMode: StoreUpload
        Configuration: ${{ matrix.Configuration }}
        GenerateAppInstallerFile: False
        TargetPlatform: ${{ matrix.targetplatform }}

    - name: Remove the .pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:SigningCertificate
      if: matrix.ChannelName != 'Prod_Store'
      
    - name: Create archive
      run: Compress-Archive -Path $env:Wap_Project_Directory\$env:App_Packages_Directory\* -DestinationPath $env:Wap_Project_Directory\$env:App_Packages_Directory\$env:App_Packages_Archive

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref}}
        release_name:  Ark Backup Handler ${{ github.ref }}
        draft: false
        prerelease: true

    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  
        asset_path: ${{ env.Wap_Project_Directory }}\${{ env.App_Packages_Directory }}\${{ env.App_Packages_Archive }}
        asset_name: Ark.Backup.Handler.Stable.zip
        asset_content_type: application/zip
